import WasmI32 from "runtime/unsafe/wasmi32"
import DataStructures, { newInt32 } from "runtime/dataStructures"

//
// WASM-4: https://wasm4.org/docs

// ┌───────────────────────────────────────────────────────────────────────────┐
// │                                                                           │
// │ Platform Constants                                                        │
// │                                                                           │
// └───────────────────────────────────────────────────────────────────────────┘

export let _SCREEN_SIZE = 160l

// ┌───────────────────────────────────────────────────────────────────────────┐
// │                                                                           │
// │ Memory Addresses                                                          │
// │                                                                           │
// └───────────────────────────────────────────────────────────────────────────┘

export let _PALETTE = 0x04l
export let _DRAW_COLORS = 0x14l
export let _GAMEPAD1 = 0x16l
export let _GAMEPAD2 = 0x17l
export let _GAMEPAD3 = 0x18l
export let _GAMEPAD4 = 0x19l
export let _MOUSE_X = 0x1al
export let _MOUSE_Y = 0x1cl
export let _MOUSE_BUTTONS = 0x1el
export let _SYSTEM_FLAGS = 0x1fl
export let _FRAMEBUFFER = 0xa0l

export let _BUTTON_1 = 1l
export let _BUTTON_2 = 2l
export let _BUTTON_LEFT = 16l
export let _BUTTON_RIGHT = 32l
export let _BUTTON_UP = 64l
export let _BUTTON_DOWN = 128l

export let _MOUSE_LEFT = 1l
export let _MOUSE_RIGHT = 2l
export let _MOUSE_MIDDLE = 4l

export let _SYSTEM_PRESERVE_FRAMEBUFFER = 1l
export let _SYSTEM_HIDE_GAMEPAD_OVERLAY = 2l

export let _BLIT_1BPP = 0l
export let _BLIT_2BPP = 1l
export let _BLIT_FLIP_X = 2l
export let _BLIT_FLIP_Y = 4l
export let _BLIT_ROTATE = 8l

export let _TONE_PULSE1 = 0l
export let _TONE_PULSE2 = 1l
export let _TONE_TRIANGLE = 2l
export let _TONE_NOISE = 3l
export let _TONE_MODE1 = 0l
export let _TONE_MODE2 = 4l
export let _TONE_MODE3 = 8l
export let _TONE_MODE4 = 12l

@unsafe
export let loadi32 = (n: Int32) => {
  WasmI32.load(WasmI32.fromGrain(n), 8n)
}

@unsafe
export let gamepad1 = () => {
  WasmI32.toGrain(newInt32(WasmI32.load8U(loadi32(_GAMEPAD1), 0n))): Int32
}

@unsafe
export let drawColors = (color: Int32) => {
  WasmI32.store16(loadi32(_DRAW_COLORS), loadi32(color), 0n)
}

import foreign wasm blit: (
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
) -> Void from "env"
@unsafe
export let blit =
  (
    sprite: Bytes,
    x: Int32,
    y: Int32,
    width: Int32,
    height: Int32,
    flags: Int32,
  ) => {
  blit(
    WasmI32.add(WasmI32.fromGrain(sprite), 8n),
    loadi32(x),
    loadi32(y),
    loadi32(width),
    loadi32(height),
    WasmI32.load(WasmI32.fromGrain(flags), 8n)
  )
}

import foreign wasm blitSub: (
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
) -> Void from "env"
@unsafe
export let blitSub =
  (
    sprite: Bytes,
    x: Int32,
    y: Int32,
    width: Int32,
    height: Int32,
    srcX: Int32,
    srcY: Int32,
    stride: Int32,
    flags: Int32,
  ) => {
  blitSub(
    WasmI32.add(WasmI32.fromGrain(sprite), 8n),
    loadi32(x),
    loadi32(y),
    loadi32(width),
    loadi32(height),
    loadi32(srcX),
    loadi32(srcY),
    loadi32(stride),
    WasmI32.load(WasmI32.fromGrain(flags), 8n)
  )
}

import foreign wasm line: (
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
) -> Void from "env"
@unsafe
export let line = (x1: Int32, y1: Int32, x2: Int32, y2: Int32) => {
  line(loadi32(x1), loadi32(y1), loadi32(x2), loadi32(y2))
}

import foreign wasm hline: (WasmI32, WasmI32, WasmI32) -> Void from "env"
@unsafe
export let hline = (x: Int32, y: Int32, len: Int32) => {
  hline(loadi32(x), loadi32(y), loadi32(len))
}

import foreign wasm vline: (WasmI32, WasmI32, WasmI32) -> Void from "env"
@unsafe
export let vline = (x: Int32, y: Int32, len: Int32) => {
  vline(loadi32(x), loadi32(y), loadi32(len))
}

import foreign wasm oval: (
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
) -> Void from "env"
@unsafe
export let oval = (x: Int32, y: Int32, width: Int32, height: Int32) => {
  oval(loadi32(x), loadi32(y), loadi32(width), loadi32(height))
}

import foreign wasm rect: (
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
) -> Void from "env"
@unsafe
export let rect = (x: Int32, y: Int32, width: Int32, height: Int32) => {
  rect(loadi32(x), loadi32(y), loadi32(width), loadi32(height))
}

import foreign wasm textUtf8: (
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
) -> Void from "env"
@unsafe
export let text = (string: String, x: Int32, y: Int32) => {
  textUtf8(
    WasmI32.add(WasmI32.fromGrain(string), 8n),
    WasmI32.load(WasmI32.fromGrain(string), 4n),
    loadi32(x),
    loadi32(y)
  )
}

import foreign wasm tone: (
  WasmI32,
  WasmI32,
  WasmI32,
  WasmI32,
) -> Void from "env"
@unsafe
export let tone =
  (
    frequency: Int32,
    duration: Int32,
    volume: Int32,
    flags: Int32,
  ) => {
  tone(
    WasmI32.load(WasmI32.fromGrain(frequency), 8n),
    WasmI32.load(WasmI32.fromGrain(duration), 8n),
    WasmI32.load(WasmI32.fromGrain(volume), 8n),
    WasmI32.load(WasmI32.fromGrain(flags), 8n)
  )
}

import foreign wasm diskr: (WasmI32, WasmI32) -> WasmI32 from "env"
@unsafe
export let diskr = (size: Int32) => {
  let size = loadi32(size)
  let bytes = DataStructures.allocateBytes(size)
  let nread = diskr(WasmI32.add(bytes, 8n), size)
  WasmI32.store(bytes, nread, 4n)
  WasmI32.toGrain(bytes): Bytes
}

import foreign wasm diskw: (WasmI32, WasmI32) -> WasmI32 from "env"
@unsafe
export let diskw = (bytes: Bytes) => {
  let bytes = WasmI32.fromGrain(bytes)
  let size = WasmI32.load(bytes, 4n)
  let nwritten = diskw(WasmI32.add(bytes, 8n), size)
  WasmI32.toGrain(newInt32(nwritten)): Int32
}

import foreign wasm traceUtf8: (WasmI32, WasmI32) -> Void from "env"
@unsafe
export let trace = (msg: String) => {
  let msgPtr = WasmI32.fromGrain(msg)
  traceUtf8(WasmI32.add(msgPtr, 8n), WasmI32.load(msgPtr, 4n))
}
