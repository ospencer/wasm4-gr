module Wasm4

from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/dataStructures" include DataStructures
use DataStructures.{ newInt32, tagUint8, untagUint8, tagUint16, untagUint16 }

//
// WASM-4: https://wasm4.org/docs

// ┌───────────────────────────────────────────────────────────────────────────┐
// │                                                                           │
// │ Platform Constants                                                        │
// │                                                                           │
// └───────────────────────────────────────────────────────────────────────────┘

provide let _SCREEN_SIZE = 160us

// ┌───────────────────────────────────────────────────────────────────────────┐
// │                                                                           │
// │ Memory Addresses                                                          │
// │                                                                           │
// └───────────────────────────────────────────────────────────────────────────┘

@unsafe
let _PALETTE = 0x04n
@unsafe
let _DRAW_COLORS = 0x14n
@unsafe
let _GAMEPAD1 = 0x16n
@unsafe
let _GAMEPAD2 = 0x17n
@unsafe
let _GAMEPAD3 = 0x18n
@unsafe
let _GAMEPAD4 = 0x19n
@unsafe
let _MOUSE_X = 0x1an
@unsafe
let _MOUSE_Y = 0x1cn
@unsafe
let _MOUSE_BUTTONS = 0x1en
@unsafe
let _SYSTEM_FLAGS = 0x1fn
@unsafe
let _FRAMEBUFFER = 0xa0n

provide let _BUTTON_1 = 1us
provide let _BUTTON_2 = 2us
provide let _BUTTON_LEFT = 16us
provide let _BUTTON_RIGHT = 32us
provide let _BUTTON_UP = 64us
provide let _BUTTON_DOWN = 128us

provide let _MOUSE_LEFT = 1uS
provide let _MOUSE_RIGHT = 2uS
provide let _MOUSE_MIDDLE = 4uS

provide let _SYSTEM_PRESERVE_FRAMEBUFFER = 1us
provide let _SYSTEM_HIDE_GAMEPAD_OVERLAY = 2us

provide let _BLIT_1BPP = 0us
provide let _BLIT_2BPP = 1us
provide let _BLIT_FLIP_X = 2us
provide let _BLIT_FLIP_Y = 4us
provide let _BLIT_ROTATE = 8us

provide let _TONE_PULSE1 = 0us
provide let _TONE_PULSE2 = 1us
provide let _TONE_TRIANGLE = 2us
provide let _TONE_NOISE = 3us
provide let _TONE_MODE1 = 0us
provide let _TONE_MODE2 = 4us
provide let _TONE_MODE3 = 8us
provide let _TONE_MODE4 = 12us

@unsafe
provide let loadi32 = (n: Uint32) => {
  WasmI32.load(WasmI32.fromGrain(n), 4n)
}

@unsafe
provide let gamepad1 = () => {
  tagUint8(WasmI32.load8U(_GAMEPAD1, 0n))
}

@unsafe
provide let drawColors = (color: Uint8) => {
  WasmI32.store16(_DRAW_COLORS, untagUint8(color), 0n)
}

@unsafe
provide let setPalette = (
  color1: Uint32,
  color2: Uint32,
  color3: Uint32,
  color4: Uint32,
) => {
  WasmI32.store(_PALETTE, loadi32(color1), 0n)
  WasmI32.store(_PALETTE, loadi32(color2), 4n)
  WasmI32.store(_PALETTE, loadi32(color3), 8n)
  WasmI32.store(_PALETTE, loadi32(color4), 16n)
}

foreign wasm blit:
  (WasmI32, WasmI32, WasmI32, WasmI32, WasmI32, WasmI32) => Void from "env"
@unsafe
provide let blit = (
  sprite: Bytes,
  x: Uint8,
  y: Uint8,
  width: Uint8,
  height: Uint8,
  flags: Uint8,
) => {
  use WasmI32.{ (+) }
  blit(
    WasmI32.fromGrain(sprite) + 8n,
    untagUint8(x),
    untagUint8(y),
    untagUint8(width),
    untagUint8(height),
    untagUint8(flags)
  )
  ignore(sprite)
}

foreign wasm blitSub:
  (
    WasmI32,
    WasmI32,
    WasmI32,
    WasmI32,
    WasmI32,
    WasmI32,
    WasmI32,
    WasmI32,
    WasmI32,
  ) => Void from "env"
@unsafe
provide let blitSub = (
  sprite: Bytes,
  x: Uint8,
  y: Uint8,
  width: Uint8,
  height: Uint8,
  srcX: Uint16,
  srcY: Uint16,
  stride: Uint8,
  flags: Uint8,
) => {
  use WasmI32.{ (+) }
  blitSub(
    WasmI32.fromGrain(sprite) + 8n,
    untagUint8(x),
    untagUint8(y),
    untagUint8(width),
    untagUint8(height),
    untagUint16(srcX),
    untagUint16(srcY),
    untagUint8(stride),
    untagUint8(flags)
  )
  ignore(sprite)
}

foreign wasm line: (WasmI32, WasmI32, WasmI32, WasmI32) => Void from "env"
@unsafe
provide let line = (x1: Uint8, y1: Uint8, x2: Uint8, y2: Uint8) => {
  line(untagUint8(x1), untagUint8(y1), untagUint8(x2), untagUint8(y2))
}

foreign wasm hline: (WasmI32, WasmI32, WasmI32) => Void from "env"
@unsafe
provide let hline = (x: Uint8, y: Uint8, len: Uint8) => {
  hline(untagUint8(x), untagUint8(y), untagUint8(len))
}

foreign wasm vline: (WasmI32, WasmI32, WasmI32) => Void from "env"
@unsafe
provide let vline = (x: Uint8, y: Uint8, len: Uint8) => {
  vline(untagUint8(x), untagUint8(y), untagUint8(len))
}

foreign wasm oval: (WasmI32, WasmI32, WasmI32, WasmI32) => Void from "env"
@unsafe
provide let oval = (x: Uint8, y: Uint8, width: Uint8, height: Uint8) => {
  oval(untagUint8(x), untagUint8(y), untagUint8(width), untagUint8(height))
}

foreign wasm rect: (WasmI32, WasmI32, WasmI32, WasmI32) => Void from "env"
@unsafe
provide let rect = (x: Uint8, y: Uint8, width: Uint8, height: Uint8) => {
  rect(untagUint8(x), untagUint8(y), untagUint8(width), untagUint8(height))
}

foreign wasm textUtf8: (WasmI32, WasmI32, WasmI32, WasmI32) => Void from "env"
@unsafe
provide let text = (string: String, x: Uint8, y: Uint8) => {
  use WasmI32.{ (+) }
  textUtf8(
    WasmI32.fromGrain(string) + 8n,
    WasmI32.load(WasmI32.fromGrain(string), 4n),
    untagUint8(x),
    untagUint8(y)
  )
  ignore(string)
}

foreign wasm tone: (WasmI32, WasmI32, WasmI32, WasmI32) => Void from "env"
@unsafe
provide let tone = (
  frequency1: Uint16,
  frequency2: Uint16,
  duration: Uint16,
  volume: Uint8,
  flags: Uint8,
) => {
  use WasmI32.{ (|), (<<) }
  tone(
    untagUint16(frequency1) | untagUint16(frequency2) << 16n,
    untagUint16(duration),
    untagUint8(volume),
    untagUint8(flags)
  )
}

foreign wasm diskr: (WasmI32, WasmI32) => WasmI32 from "env"
@unsafe
provide let diskr = (size: Uint16) => {
  use WasmI32.{ (+) }
  let size = untagUint16(size)
  let bytes = DataStructures.allocateBytes(size)
  let nread = diskr(bytes + 8n, size)
  WasmI32.store(bytes, nread, 4n)
  WasmI32.toGrain(bytes): Bytes
}

foreign wasm diskw: (WasmI32, WasmI32) => WasmI32 from "env"
@unsafe
provide let diskw = (bytes: Bytes) => {
  use WasmI32.{ (+) }
  let bytesPtr = WasmI32.fromGrain(bytes)
  let size = WasmI32.load(bytesPtr, 4n)
  let nwritten = diskw(bytesPtr + 8n, size)
  ignore(bytes)
  tagUint16(nwritten)
}

foreign wasm traceUtf8: (WasmI32, WasmI32) => Void from "env"
@unsafe
provide let trace = (msg: String) => {
  use WasmI32.{ (+) }
  let msgPtr = WasmI32.fromGrain(msg)
  traceUtf8(msgPtr + 8n, WasmI32.load(msgPtr, 4n))
  ignore(msg)
}
